const { runTests } = require('./run-tests');
const { AuthTester } = require('./test-auth');
const { StressTester } = require('./stress-test');
const { SecurityTester } = require('./security-test');

/**
 * EXEMPLOS PR√ÅTICOS DE USO DA SUITE DE TESTES
 * ===========================================
 * 
 * Este arquivo demonstra como usar a suite de testes
 * de forma program√°tica e com diferentes configura√ß√µes.
 */

// Exemplo 1: Teste b√°sico de conectividade
async function exemploConectividade() {
  console.log('\nüîó EXEMPLO 1: TESTE DE CONECTIVIDADE');
  console.log('====================================');

  const axios = require('axios');
  const baseUrl = 'http://localhost:3000';

  try {
    console.log('üì° Testando conectividade com o servidor...');
    
    const response = await axios.get(`${baseUrl}/health`, {
      timeout: 5000,
      validateStatus: () => true
    });

    if (response.status === 200) {
      console.log('‚úÖ Servidor est√° respondendo');
      console.log(`üìä Status: ${response.status}`);
      console.log(`üìÑ Response: ${JSON.stringify(response.data, null, 2)}`);
      return true;
    } else {
      console.log(`‚ùå Servidor retornou status: ${response.status}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Erro de conectividade: ${error.message}`);
    return false;
  }
}

// Exemplo 2: Teste customizado de autentica√ß√£o
async function exemploAutenticacao() {
  console.log('\nüîê EXEMPLO 2: TESTE PERSONALIZADO DE AUTENTICA√á√ÉO');
  console.log('=================================================');

  const authTester = new AuthTester();

  try {
    console.log('üöÄ Configurando autentica√ß√£o...');
    const authResult = await authTester.setupAuthentication();

    if (authResult.success) {
      console.log('‚úÖ Autentica√ß√£o configurada com sucesso');
      console.log(`üîë Token obtido: ${authResult.token.substring(0, 20)}...`);

      // Testar m√∫ltiplas rotas protegidas
      const rotasProtegidas = ['/api/tasks', '/api/tasks/123'];
      
      for (const rota of rotasProtegidas) {
        console.log(`üîç Testando acesso a ${rota}...`);
        const resultado = await authTester.testProtectedRoute(rota);
        
        if (resultado.success) {
          console.log(`‚úÖ Acesso autorizado a ${rota}`);
        } else {
          console.log(`‚ùå Acesso negado a ${rota}: ${resultado.status}`);
        }
      }

      return true;
    } else {
      console.log('‚ùå Falha na configura√ß√£o de autentica√ß√£o');
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Exemplo 3: Teste customizado de rate limiting
async function exemploRateLimit() {
  console.log('\nüö¶ EXEMPLO 3: TESTE PERSONALIZADO DE RATE LIMITING');
  console.log('==================================================');

  const axios = require('axios');
  const baseUrl = 'http://localhost:3000';
  
  try {
    console.log('üìà Enviando m√∫ltiplas requisi√ß√µes para testar rate limit...');
    
    const requests = [];
    const totalRequests = 25; // N√∫mero menor para exemplo
    
    // Enviar requests em paralelo
    for (let i = 0; i < totalRequests; i++) {
      requests.push(
        axios.get(`${baseUrl}/health`, {
          validateStatus: () => true,
          timeout: 5000
        }).then(response => ({
          requestNumber: i + 1,
          status: response.status,
          blocked: response.status === 429
        })).catch(error => ({
          requestNumber: i + 1,
          error: error.message,
          blocked: false
        }))
      );
    }

    const responses = await Promise.all(requests);
    
    // Analisar resultados
    const successful = responses.filter(r => r.status === 200).length;
    const blocked = responses.filter(r => r.blocked).length;
    const errors = responses.filter(r => r.error).length;

    console.log(`üìä Resultados:`);
    console.log(`   ‚úÖ Sucessos: ${successful}`);
    console.log(`   üö´ Bloqueados: ${blocked}`);
    console.log(`   ‚ùå Erros: ${errors}`);

    if (blocked > 0) {
      console.log('‚úÖ Rate limiting est√° funcionando!');
      console.log(`üîí ${blocked} requests foram bloqueados`);
    } else {
      console.log('‚ö†Ô∏è  Rate limiting pode n√£o estar configurado');
    }

    return blocked > 0;

  } catch (error) {
    console.log(`‚ùå Erro no teste de rate limit: ${error.message}`);
    return false;
  }
}

// Exemplo 4: Teste de performance simples
async function exemploPerformance() {
  console.log('\n‚ö° EXEMPLO 4: TESTE SIMPLES DE PERFORMANCE');
  console.log('==========================================');

  const axios = require('axios');
  const baseUrl = 'http://localhost:3000';

  try {
    console.log('‚è±Ô∏è  Medindo tempo de resposta...');
    
    const endpoints = ['/', '/health'];
    const results = {};

    for (const endpoint of endpoints) {
      const times = [];
      const attempts = 5;

      console.log(`üìä Testando ${endpoint} (${attempts} tentativas)...`);

      for (let i = 0; i < attempts; i++) {
        const startTime = Date.now();
        
        try {
          await axios.get(`${baseUrl}${endpoint}`, { timeout: 5000 });
          const responseTime = Date.now() - startTime;
          times.push(responseTime);
        } catch (error) {
          times.push(Date.now() - startTime);
        }

        // Pequeno delay entre requests
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      const avgTime = times.reduce((sum, time) => sum + time, 0) / times.length;
      const minTime = Math.min(...times);
      const maxTime = Math.max(...times);

      results[endpoint] = {
        avg: Math.round(avgTime),
        min: minTime,
        max: maxTime
      };

      console.log(`   üìà M√©dia: ${results[endpoint].avg}ms`);
      console.log(`   ‚è´ M√°ximo: ${results[endpoint].max}ms`);
      console.log(`   ‚è¨ M√≠nimo: ${results[endpoint].min}ms`);
    }

    return results;

  } catch (error) {
    console.log(`‚ùå Erro no teste de performance: ${error.message}`);
    return null;
  }
}

// Exemplo 5: Teste de seguran√ßa espec√≠fico
async function exemploSeguranca() {
  console.log('\nüîí EXEMPLO 5: TESTE ESPEC√çFICO DE SEGURAN√áA');
  console.log('===========================================');

  const axios = require('axios');
  const baseUrl = 'http://localhost:3000';

  try {
    console.log('üîç Testando acesso n√£o autorizado...');
    
    // Tentar acessar rota protegida sem token
    const response = await axios.get(`${baseUrl}/api/tasks`, {
      validateStatus: () => true
    });

    if (response.status === 401 || response.status === 403) {
      console.log('‚úÖ Rota protegida est√° funcionando corretamente');
      console.log(`üîí Status retornado: ${response.status}`);
    } else if (response.status === 200) {
      console.log('‚ùå VULNERABILIDADE: Rota deveria estar protegida!');
      console.log('üö® Acesso n√£o autorizado foi permitido');
    } else {
      console.log(`‚ö†Ô∏è  Status inesperado: ${response.status}`);
    }

    // Testar com token inv√°lido
    console.log('üîç Testando token inv√°lido...');
    const invalidResponse = await axios.get(`${baseUrl}/api/tasks`, {
      headers: { 'Authorization': 'Bearer invalid.token.here' },
      validateStatus: () => true
    });

    if (invalidResponse.status === 401 || invalidResponse.status === 403) {
      console.log('‚úÖ Token inv√°lido foi rejeitado corretamente');
    } else {
      console.log('‚ùå VULNERABILIDADE: Token inv√°lido foi aceito!');
    }

    return {
      protectedRouteSecure: response.status === 401 || response.status === 403,
      invalidTokenRejected: invalidResponse.status === 401 || invalidResponse.status === 403
    };

  } catch (error) {
    console.log(`‚ùå Erro no teste de seguran√ßa: ${error.message}`);
    return null;
  }
}

// Exemplo 6: Execu√ß√£o de testes customizados
async function exemploTestesCustomizados() {
  console.log('\nüéØ EXEMPLO 6: EXECU√á√ÉO DE TESTES CUSTOMIZADOS');
  console.log('==============================================');

  try {
    // Executar apenas teste de estresse
    console.log('‚ö° Executando apenas testes de estresse...');
    const stressResult = await runTests('stress');
    
    if (stressResult.success) {
      console.log('‚úÖ Testes de estresse conclu√≠dos');
      console.log(`üéØ Score: ${stressResult.stress?.score || 'N/A'}/100`);
    }

    // Pequeno delay
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Executar teste r√°pido
    console.log('\n‚ö° Executando teste r√°pido...');
    const quickResult = await runTests('quick');
    
    if (quickResult.success) {
      console.log('‚úÖ Teste r√°pido conclu√≠do');
      console.log(`üéØ Score: ${quickResult.score || 'N/A'}/100`);
    }

    return {
      stress: stressResult,
      quick: quickResult
    };

  } catch (error) {
    console.log(`‚ùå Erro nos testes customizados: ${error.message}`);
    return null;
  }
}

// Fun√ß√£o principal para executar todos os exemplos
async function executarExemplos() {
  console.log('\nüöÄ EXECUTANDO EXEMPLOS PR√ÅTICOS DE USO');
  console.log('======================================');
  console.log('‚ö†Ô∏è  Certifique-se de que o servidor esteja rodando em http://localhost:3000');

  const resultados = {};

  try {
    // Exemplo 1: Conectividade
    resultados.conectividade = await exemploConectividade();
    
    if (!resultados.conectividade) {
      console.log('\n‚ùå Servidor n√£o est√° respondendo. Parando exemplos.');
      return resultados;
    }

    // Exemplo 2: Autentica√ß√£o
    resultados.autenticacao = await exemploAutenticacao();

    // Exemplo 3: Rate Limiting
    resultados.rateLimit = await exemploRateLimit();

    // Exemplo 4: Performance
    resultados.performance = await exemploPerformance();

    // Exemplo 5: Seguran√ßa
    resultados.seguranca = await exemploSeguranca();

    // Exemplo 6: Testes Customizados (opcional)
    // resultados.customizados = await exemploTestesCustomizados();

    console.log('\nüìã RESUMO DOS EXEMPLOS:');
    console.log('=======================');
    console.log(`üîó Conectividade: ${resultados.conectividade ? '‚úÖ' : '‚ùå'}`);
    console.log(`üîê Autentica√ß√£o: ${resultados.autenticacao ? '‚úÖ' : '‚ùå'}`);
    console.log(`üö¶ Rate Limiting: ${resultados.rateLimit ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚ö° Performance: ${resultados.performance ? '‚úÖ' : '‚ùå'}`);
    console.log(`üîí Seguran√ßa: ${resultados.seguranca ? '‚úÖ' : '‚ùå'}`);

    return resultados;

  } catch (error) {
    console.error(`üí• Erro fatal nos exemplos: ${error.message}`);
    return resultados;
  }
}

// Dicas de uso
function mostrarDicas() {
  console.log(`
üí° DICAS DE USO:
===============

1. üîß CONFIGURA√á√ÉO:
   - Configure a URL base: export TEST_BASE_URL=http://localhost:3000
   - Ajuste timeout: export TEST_TIMEOUT=10000

2. üöÄ EXECU√á√ÉO:
   - Teste r√°pido: npm run test:quick
   - Teste completo: npm test
   - Apenas seguran√ßa: npm run test:security

3. üìä INTERPRETA√á√ÉO DE RESULTADOS:
   - Score 90-100: Excelente seguran√ßa
   - Score 75-89: Boa seguran√ßa
   - Score 60-74: Seguran√ßa regular
   - Score <60: Necessita melhorias

4. ‚ö†Ô∏è PROBLEMAS COMUNS:
   - "Connection refused": Servidor n√£o est√° rodando
   - "Timeout": Servidor muito lento ou sobrecarregado
   - "401/403": Autentica√ß√£o funcionando (esperado)

5. üîí SEGURAN√áA:
   - Execute apenas em desenvolvimento
   - NUNCA em produ√ß√£o
   - Monitore logs durante os testes
`);
}

// Executar se chamado diretamente
if (require.main === module) {
  const comando = process.argv[2];

  if (comando === 'dicas') {
    mostrarDicas();
  } else {
    executarExemplos()
      .then(resultados => {
        console.log('\nüèÅ EXEMPLOS CONCLU√çDOS!');
        console.log('\nüí° Para ver dicas de uso: node example-usage.js dicas');
      })
      .catch(error => {
        console.error('üí• Erro fatal:', error);
        process.exit(1);
      });
  }
}

module.exports = {
  exemploConectividade,
  exemploAutenticacao,
  exemploRateLimit,
  exemploPerformance,
  exemploSeguranca,
  exemploTestesCustomizados,
  executarExemplos,
  mostrarDicas
};
